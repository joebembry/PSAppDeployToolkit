using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Microsoft.PowerShell;
using Microsoft.PowerShell.Commands;
using Newtonsoft.Json;

namespace PSADT.UserInterface.DialogOptions
{
    /// <summary>
    /// Options for all dialogs.
    /// </summary>
    public sealed record HelpConsoleOptions
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HelpConsoleOptions"/> class with the specified options.
        /// This accepts a hashtable of parameters to ease construction on the PowerShell side of things.
        /// </summary>
        /// <param name="options"></param>
        public HelpConsoleOptions(Hashtable options)
        {
            // Nothing here is allowed to be null.
            if (options["ExecutionPolicy"] is not ExecutionPolicy executionPolicy)
            {
                throw new ArgumentNullException("ExecutionPolicy value is null or invalid.", (Exception?)null);
            }
            if (options["Modules"] is not ReadOnlyCollection<ModuleSpecification> modules || modules.Count == 0 || modules.Any(static m => string.IsNullOrWhiteSpace(m.Name) || null == m.Guid || null == m.Version))
            {
                throw new ArgumentNullException("Modules value is null or invalid.", (Exception?)null);
            }

            // The hashtable was correctly defined, assign the remaining values.
            ExecutionPolicy = executionPolicy;
            ModuleData = modules.Select(static m => new Hashtable { { "ModuleName", m.Name }, { "ModuleVersion", m.Version.ToString() }, { "Guid", m.Guid } }).ToList().AsReadOnly();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HelpConsoleOptions"/> class with the specified execution policy
        /// and module data.
        /// </summary>
        /// <param name="executionPolicy">The execution policy to be applied. This determines the level of permissions granted during execution.</param>
        /// <param name="moduleData">A read-only collection of hashtables containing module-specific data. Cannot be null.</param>
        /// <exception cref="ArgumentNullException">Thrown if <paramref name="moduleData"/> is null.</exception>
        [JsonConstructor]
        private HelpConsoleOptions(ExecutionPolicy executionPolicy, ReadOnlyCollection<Hashtable> moduleData)
        {
            ExecutionPolicy = executionPolicy;
            ModuleData = moduleData ?? throw new ArgumentNullException(nameof(moduleData));
        }

        /// <summary>
        /// Gets the execution policy that determines how operations are executed.
        /// </summary>
        [JsonProperty]
        public readonly ExecutionPolicy ExecutionPolicy;

        /// <summary>
        /// Gets a read-only list of module specifications derived from the current module data.
        /// </summary>
        /// <remarks>The list is generated by transforming the internal module data into <see
        /// cref="ModuleSpecification"/> instances. This property provides a snapshot of the module specifications at
        /// the time of access.</remarks>
        [JsonIgnore]
        public IReadOnlyList<ModuleSpecification> Modules => ModuleData.Select(static m => new ModuleSpecification(m)).ToList().AsReadOnly();

        /// <summary>
        /// Represents a collection of module data.
        /// </summary>
        /// <remarks>This collection is read-only and contains elements of type <see cref="Hashtable"/>.</remarks>
        [JsonProperty]
        private readonly ReadOnlyCollection<Hashtable> ModuleData;
    }
}
